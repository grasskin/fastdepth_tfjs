{"version":3,"file":"tf-backend-cpu.es2017.min.js","sources":["../src/kernels/Max_impl.ts","../src/kernels/Transpose_impl.ts","../src/cpu_util.ts","../src/utils/pool_utils.ts","../src/backend_cpu.ts","../src/utils/kernel_utils.ts","../src/kernels/Div_impl.ts","../src/kernels/Div.ts","../src/kernels/Max.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/kernels/Square.ts","../src/kernels/SquaredDifference.ts","../src/register_all_kernels.ts","../src/kernels/Transpose.ts","../src/index.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {engine, env} from '@tensorflow/tfjs-core';\nimport {backend_util, buffer, slice_util, util} from '@tensorflow/tfjs-core';\nimport {BackendTimingInfo, DataStorage, DataType, DataValues, KernelBackend, max, NumericDataType, Rank, Scalar, ShapeMap, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, TensorBuffer, TypedArray, upcastType} from '@tensorflow/tfjs-core';\nimport {kernel_impls} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3 = kernel_impls.nonMaxSuppressionV3;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\nimport * as seedrandom from 'seedrandom';\nimport {assertNotComplex} from './cpu_util';\nimport {maxPoolPositions, pool} from './utils/pool_utils';\n\ninterface DataId {}\n\nfunction mapActivation(\n    backend: MathBackendCPU, x: Tensor, activation: backend_util.Activation,\n    preluActivationWeights?: Tensor): Tensor {\n  if (activation === 'linear') {\n    return backend.linear(x);\n  } else if (activation === 'relu') {\n    return backend.relu(x);\n  } else if (activation === 'elu') {\n    return backend.elu(x);\n  } else if (activation === 'relu6') {\n    return backend.relu6(x);\n  } else if (activation === 'prelu') {\n    return backend.prelu(x, preluActivationWeights);\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensors field.\n  // TODO(smilkov): Replace Tensor with TensorInfo when you modularize ops\n  // that work with complex tensors.\n  complexTensors?: {real: Tensor, imag: Tensor};\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi there 👋. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================');\n      }\n    }\n    const dataId = {};\n    this.data.set(dataId, {values, dtype});\n    return dataId;\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType): void {\n    this.data.set(dataId, {values, dtype});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensors} = this.data.get(dataId);\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensors.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensors.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n    return this.data.get(dataId).values;\n  }\n\n  private bufferSync<R extends Rank>(t: Tensor<R>): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return tf.buffer(t.shape, t.dtype, decodedData) as TensorBuffer<R>;\n  }\n\n  private makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    const dataId = this.write(values, shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  disposeData(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const {complexTensors} = this.data.get(dataId);\n      if (complexTensors != null) {\n        complexTensors.real.dispose();\n        complexTensors.imag.dispose();\n      }\n      this.data.delete(dataId);\n    }\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  complex<T extends Tensor>(real: T, imag: T): T {\n    const result = this.makeOutput(null, real.shape, 'complex64');\n\n    const resultData = this.data.get(result.dataId);\n    // The backend owns the reference to the underlying real and imaginary\n    // clones. These will explicitly get disposed when the complex tensor is\n    // disposed.\n    resultData.complexTensors = {\n      real: engine().keep(real.clone()),\n      imag: engine().keep(imag.clone())\n    };\n\n    return result as T;\n  }\n  real<T extends Tensor>(input: T): T {\n    const resultData = this.data.get(input.dataId);\n    return resultData.complexTensors.real.clone() as T;\n  }\n  imag<T extends Tensor>(input: T): T {\n    const resultData = this.data.get(input.dataId);\n    return resultData.complexTensors.imag.clone() as T;\n  }\n\n  slice<T extends Tensor>(x: T, begin: number[], size: number[]): T {\n    assertNotComplex(x, 'slice');\n\n    const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n    if (isContinous) {\n      const flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n      const length = util.sizeFromShape(size);\n      const vals = this.readSync(x.dataId) as TypedArray;\n      return tf.tensor(\n                 vals.subarray(flatOffset, flatOffset + length), size,\n                 x.dtype) as T;\n    }\n\n    const buffer = tf.buffer(size, x.dtype);\n    const xBuf = this.bufferSync(x);\n    for (let i = 0; i < buffer.size; ++i) {\n      const loc = buffer.indexToLoc(i);\n      const xLoc = loc.map((idx, j) => idx + begin[j]);\n      buffer.values[i] = xBuf.get(...xLoc);\n    }\n    return buffer.toTensor() as T;\n  }\n\n  stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[]): T {\n    assertNotComplex(x, 'stridedSlice');\n\n    const outShape = slice_util.computeOutShape(begin, end, strides);\n\n    if (outShape.some(axis => axis === 0)) {\n      return tf.tensor([], outShape) as T;\n    }\n\n    const buffer = tf.buffer(outShape, x.dtype);\n    const xBuf = this.bufferSync(x);\n    for (let i = 0; i < buffer.size; i++) {\n      const loc = buffer.indexToLoc(i);\n\n      const newLoc: number[] = new Array(loc.length);\n      for (let j = 0; j < newLoc.length; j++) {\n        newLoc[j] = loc[j] * strides[j] + begin[j];\n      }\n      buffer.set(xBuf.get(...newLoc), ...loc);\n    }\n\n    return buffer.toTensor() as T;\n  }\n\n  diag(x: Tensor): Tensor {\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const buffer = tf.buffer([x.size, x.size], x.dtype);\n    const vals = buffer.values;\n    for (let i = 0; i < xVals.length; i++) {\n      vals[i * x.size + i] = xVals[i];\n    }\n    return buffer.toTensor();\n  }\n\n  unstack(x: Tensor, axis: number): Tensor[] {\n    const num = x.shape[axis];\n    const outShape: number[] = new Array(x.rank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < x.rank; i++) {\n      if (i !== axis) {\n        outShape[outIndex++] = x.shape[i];\n      }\n    }\n\n    const begin = new Array(x.rank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n      begin[axis] = i;\n      res[i] = this.slice(x, begin, size).reshape(outShape);\n    }\n    return res;\n  }\n\n  reverse<T extends Tensor>(x: T, axis: number[]): T {\n    assertNotComplex(x, 'reverse');\n\n    const buffer = tf.buffer(x.shape, x.dtype);\n    const xBuf = this.bufferSync(x);\n\n    for (let i = 0; i < buffer.size; i++) {\n      const outLoc = buffer.indexToLoc(i);\n      const inLoc = outLoc.slice();\n      axis.forEach(ax => inLoc[ax] = x.shape[ax] - 1 - inLoc[ax]);\n      buffer.set(xBuf.get(...inLoc), ...outLoc);\n    }\n\n    return buffer.toTensor() as T;\n  }\n\n  concat(tensors: Tensor[], axis: number): Tensor {\n    if (tensors[0].dtype === 'complex64') {\n      const reals = tensors.map((t) => tf.real(t));\n      const imags = tensors.map((t) => tf.imag(t));\n      return tf.complex(this.concat(reals, axis), this.concat(imags, axis));\n    }\n    const tensors2D = tensors.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      return t.as2D(-1, innerSize);\n    });\n    const outShape =\n      backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis\n        */);\n    const values =\n        tf.buffer(outShape as [number, number], tensors[0].dtype as 'float32')\n            .values;\n    if (tensors2D[0].shape[0] === 1) {\n      // Use built-in TypedArray.set() method for speed.\n      let offset = 0;\n      tensors2D.forEach(t => {\n        values.set(this.readSync(t.dataId) as TypedArray, offset);\n        offset += t.size;\n      });\n    } else {\n      let colOffset = 0;\n      tensors2D.forEach(t => {\n        const tVals = this.readSync(t.dataId) as TypedArray;\n        let tIdx = 0;\n        for (let row = 0; row < t.shape[0]; ++row) {\n          const resIdx = row * outShape[1] + colOffset;\n          for (let col = 0; col < t.shape[1]; ++col) {\n            values[resIdx + col] = tVals[tIdx++];\n          }\n        }\n        colOffset += t.shape[1];\n      });\n    }\n    const finalOutShape =\n        backend_util.computeOutShape(tensors.map(t => t.shape), axis);\n    return tf.tensor(values, finalOutShape, tensors[0].dtype);\n  }\n\n  neg<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'neg');\n\n    return this.multiply(tf.scalar(-1), x) as T;\n  }\n\n  add(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {real: aReal + bReal, imag: aImag + bImag};\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue + bValue);\n  }\n\n  addN<T extends Tensor>(tensors: T[]): T {\n    assertNotComplex(tensors, 'addN');\n\n    const vals = tensors.map(t => this.readSync(t.dataId) as TypedArray);\n    const result = tf.buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n    const resultVals = result.values;\n    for (let i = 0; i < tensors.length; i++) {\n      const currVals = vals[i];\n      for (let j = 0; j < resultVals.length; j++) {\n        resultVals[j] += currVals[j];\n      }\n    }\n    return result.toTensor() as T;\n  }\n\n  softmax<T extends Tensor>(logits: T, dim: number): T {\n    const axes = util.parseAxisParam([dim], logits.shape);\n    // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n    // modularization.\n    const maxLogit = max(logits, axes);\n    const expandedShape =\n        backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n    const a = this.subtract(logits, maxLogit.reshape(expandedShape));\n    const b = this.exp(a);\n    const sumExp = this.sum(b, axes).reshape(expandedShape);\n\n    // TODO(annxingyuan): Call divImpl rather than op as part of softmax\n    // kernel modularization.\n    return tf.div(b, sumExp);\n  }\n\n  subtract(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {real: aReal - bReal, imag: aImag - bImag};\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue - bValue);\n  }\n\n  pow<T extends Tensor>(a: T, b: Tensor): T {\n    assertNotComplex([a, b], 'pow');\n\n    return this.broadcastedBinaryOp(\n               a, b, a.dtype, (aValue, bValue) => Math.pow(aValue, bValue)) as\n        T;\n  }\n\n  batchMatMul(\n      a: Tensor3D, b: Tensor3D, transposeA: boolean,\n      transposeB: boolean): Tensor3D {\n    assertNotComplex([a, b], 'matMul');\n\n    const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n    const leftDim = transposeA ? a.shape[2] : a.shape[1];\n    const rightDim = transposeB ? b.shape[1] : b.shape[2];\n    const batchDim = a.shape[0];\n\n    const aValues = this.readSync(a.dataId) as TypedArray;\n    const bValues = this.readSync(b.dataId) as TypedArray;\n    const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n        [a.strides[0], 1, a.strides[1]] :\n        [a.strides[0], a.strides[1], 1];\n    const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n        [1, b.strides[1], b.strides[0]] :\n        [b.strides[1], 1, b.strides[0]];\n\n    const size = leftDim * rightDim;\n    const result = tf.buffer([batchDim, leftDim, rightDim], a.dtype);\n    const resVals = result.values as TypedArray;\n    const blockSize = this.blockSize;\n\n    for (let b = 0; b < batchDim; b++) {\n      for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n        for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n          for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n            // for when blockSize doesn't evenly divide the input\n            const iBlock = Math.min(i0 + blockSize, leftDim);\n            const jBlock = Math.min(j0 + blockSize, rightDim);\n            const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n            for (let i = i0; i < iBlock; i++) {\n              for (let j = j0; j < jBlock; j++) {\n                let sum = 0.0;\n\n                for (let k = k0; k < kBlock; k++) {\n                  sum += aValues[b * aBatch + i * aOuterStep + k * aInnerStep] *\n                      bValues[k * bInnerStep + j * bOuterStep + b * bBatch];\n                }\n                resVals[b * size + (i * rightDim + j)] += sum;\n              }\n            }\n          }\n        }\n      }\n    }\n    return result.toTensor() as Tensor3D;\n  }\n\n  fusedBatchMatMul(\n      {a, b, transposeA, transposeB, bias, activation, preluActivationWeights}:\n          backend_util.FusedBatchMatMulConfig): Tensor3D {\n    let result = this.batchMatMul(a, b, transposeA, transposeB);\n    if (bias) {\n      result = this.add(result, bias) as Tensor3D;\n    }\n    if (activation) {\n      result =\n          mapActivation(this, result, activation, preluActivationWeights) as\n          Tensor3D;\n    }\n    return result;\n  }\n\n  multiply(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {\n              real: aReal * bReal - aImag * bImag,\n              imag: aReal * bImag + aImag * bReal\n            };\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue * bValue);\n  }\n\n  floorDiv(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'floorDiv');\n\n    const op = (a: number, b: number) => Math.floor(a / b);\n    const outputDtype = 'int32';\n    return this.broadcastedBinaryOp(a, b, outputDtype, op);\n  }\n\n  sum(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'sum');\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = tf.zeros(outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let sum = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        sum += aVals[offset + j];\n      }\n      vals[i] = sum;\n    }\n    return result;\n  }\n\n  prod(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'sum');\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = tf.zeros(outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let prod = 1;\n      for (let j = 0; j < reduceSize; ++j) {\n        prod *= aVals[offset + j];\n      }\n      vals[i] = prod;\n    }\n    return result;\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): Tensor {\n    assertNotComplex(x, 'unsortedSegmentSum');\n\n    const res = [];\n\n    // Reshape the segment id's so that they can be broadcast with\n    // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n    const numIters = x.rank - segmentIds.rank;\n    for (let i = 0; i < numIters; ++i) {\n      segmentIds = segmentIds.expandDims(i + 1);\n    }\n\n    for (let i = 0; i < numSegments; ++i) {\n      const segmentId = tf.scalar(i, 'int32');\n      const mask = tf.equal(segmentId, segmentIds).asType('float32');\n      const sum = mask.mul(x).sum(0);\n      res.push(sum);\n    }\n\n    return tf.stack(res);\n  }\n\n  argMin(x: Tensor, axis: number): Tensor {\n    assertNotComplex(x, 'argMin');\n\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let min = aVals[offset];\n      let minIndex = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value < min) {\n          min = value;\n          minIndex = j;\n        }\n      }\n      vals[i] = minIndex;\n    }\n    return result;\n  }\n\n  argMax(x: Tensor, axis: number): Tensor {\n    assertNotComplex(x, 'argMax');\n\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let max = aVals[offset];\n      let maxIndex = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value > max) {\n          max = value;\n          maxIndex = j;\n        }\n      }\n      vals[i] = maxIndex;\n    }\n    return result;\n  }\n\n  cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean):\n      Tensor {\n    assertNotComplex(x, 'cumsum');\n\n    if (axis !== x.rank - 1) {\n      throw new Error(\n          `backend.cumsum in CPU expects an inner-most axis=${x.rank - 1} ` +\n          `but got axis=${axis}`);\n    }\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = tf.zeros(x.shape, resultDtype);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    const finalDim = x.shape[x.rank - 1];\n    const indexAdjuster = reverse ?\n        (i: number, j: number) => i + finalDim - j - 1 :\n        (i: number, j: number) => i + j;\n    for (let i = 0; i < aVals.length; i += finalDim) {\n      for (let j = 0; j < finalDim; j++) {\n        const idx = indexAdjuster(i, j);\n        if (j === 0) {\n          vals[idx] = exclusive ? 0 : aVals[idx];\n        } else {\n          const prevIdx = indexAdjuster(i, j - 1);\n          vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                  aVals[idx] + vals[prevIdx];\n        }\n      }\n    }\n    return result;\n  }\n\n  equal(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'equal');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal === bVal) ? 1 : 0;\n    });\n  }\n\n  notEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'notEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal !== bVal) ? 1 : 0;\n    });\n  }\n\n  less(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'less');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal < bVal) ? 1 : 0;\n    });\n  }\n\n  lessEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'lessEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal <= bVal) ? 1 : 0;\n    });\n  }\n\n  greater(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'greater');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal > bVal) ? 1 : 0;\n    });\n  }\n\n  greaterEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'greaterEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal >= bVal) ? 1 : 0;\n    });\n  }\n\n  logicalNot<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'logicalNot');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = values[i] ? 0 : 1;\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  logicalAnd(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'logicalAnd');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return aVal && bVal;\n    });\n  }\n\n  logicalOr(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'logicalOr');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return aVal || bVal;\n    });\n  }\n\n  select(condition: Tensor, a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([condition, a, b], 'select');\n\n    const values = this.readSync(condition.dataId) as TypedArray;\n    const aValues = this.readSync(a.dataId) as TypedArray;\n    const bValues = this.readSync(b.dataId) as TypedArray;\n    const result = tf.zeros(a.shape, upcastType(a.dtype, b.dtype));\n    const newValues = this.readSync(result.dataId) as TypedArray;\n    let index = 0;\n    const offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ?\n        1 :\n        util.sizeFromShape(a.shape.slice(1));\n\n    for (let i = 0; i < values.length; i++) {\n      for (let j = 0; j < offset; j++) {\n        if (values[i] === 1) {\n          newValues[index++] = aValues[i];\n        } else {\n          newValues[index++] = bValues[i];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean): [T, T] {\n    assertNotComplex(x, 'topk');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    return topkImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n  }\n\n  min(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'min');\n\n    backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let min = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value < min) {\n          min = value;\n        }\n      }\n      vals[i] = min;\n    }\n    return result;\n  }\n\n  minimum(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'minimum');\n\n    return this.broadcastedBinaryOp(\n        a, b, a.dtype, (aVal, bVal) => Math.min(aVal, bVal));\n  }\n\n  mod(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'mod');\n\n    return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n      const rem = aVal % bVal;\n      if ((aVal < 0 && bVal < 0) || (aVal >= 0 && bVal >= 0)) {\n        return rem;\n      } else {\n        return (rem + bVal) % bVal;\n      }\n    });\n  }\n\n  maximum(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'maximum');\n\n    return this.broadcastedBinaryOp(\n        a, b, a.dtype, (aVal, bVal) => Math.max(aVal, bVal));\n  }\n\n  all(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'all');\n\n    backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let all = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        all = all && value;\n      }\n      vals[i] = all;\n    }\n    return result;\n  }\n\n  any(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'any');\n\n    backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let anyVal = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        anyVal = anyVal || value;\n      }\n      vals[i] = anyVal;\n    }\n    return result;\n  }\n\n  squaredDifference(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'squaredDifference');\n\n    return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n      const diff = aVal - bVal;\n      return diff * diff;\n    });\n  }\n\n  ceil<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'ceil');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.ceil(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  floor<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'floor');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.floor(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  sign<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (values[i] < 0) {\n        newValues[i] = -1;\n      } else if (values[i] > 0) {\n        newValues[i] = 1;\n      } else {\n        newValues[i] = 0;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  isNaN<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Number.isNaN(values[i])) {\n        newValues[i] = 1;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  isInf<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Math.abs(values[i]) === Infinity) {\n        newValues[i] = 1;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  isFinite<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Number.isFinite(values[i])) {\n        newValues[i] = 1;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  round<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'round');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      // The algorithm is based on banker's rounding.\n      const base = Math.floor(values[i]);\n      if (values[i] - base < 0.5) {\n        newValues[i] = Math.floor(values[i]);\n      } else if (values[i] - base > 0.5) {\n        newValues[i] = Math.ceil(values[i]);\n      } else {\n        if (base % 2.0 === 0.0) {\n          newValues[i] = base;\n        } else {\n          newValues[i] = base + 1.0;\n        }\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  exp<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'exp');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.exp(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  expm1<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'expm1');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.expm1(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  log<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'log');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.log(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  log1p<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'log1p');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.log1p(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  sqrt<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sqrt');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.sqrt(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  rsqrt<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'rsqrt');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = 1 / Math.sqrt(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  reciprocal<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'reciprocal');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = 1 / values[i];\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  linear<T extends Tensor>(x: T): T {\n    return x;\n  }\n\n  relu<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'relu');\n\n    const res = tf.zeros(x.shape, x.dtype);\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const inVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < inVals.length; ++i) {\n      resVals[i] = Math.max(0, inVals[i]);\n    }\n    return res as T;\n  }\n\n  relu6<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'relu');\n\n    const res = tf.zeros(x.shape, x.dtype);\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const inVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < inVals.length; ++i) {\n      resVals[i] = Math.min(Math.max(0, inVals[i]), 6);\n    }\n    return res as T;\n  }\n\n  prelu<T extends Tensor>(x: T, a: T): T {\n    assertNotComplex([x, a], 'prelu');\n\n    return this.broadcastedBinaryOp(\n               x, a, x.dtype,\n               (xValue, aValue) => xValue < 0 ? aValue * xValue : xValue) as T;\n  }\n\n  elu<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'elu');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 0) {\n        resultValues[i] = v;\n      } else {\n        resultValues[i] = (Math.exp(v) - 1);\n      }\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  eluDer<T extends Tensor>(dy: T, y: T): T {\n    assertNotComplex([dy, y], 'eluDer');\n\n    const resultValues = new Float32Array(y.size);\n    const values = this.readSync(y.dataId) as TypedArray;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 1) {\n        resultValues[i] = dyValues[i];\n      } else {\n        resultValues[i] = dyValues[i] * (v + 1);\n      }\n    }\n    return this.makeOutput(resultValues, y.shape, 'float32');\n  }\n\n  selu<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'selu');\n\n    // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n    // see: https://arxiv.org/abs/1706.02515\n    const scaleAlpha = backend_util.SELU_SCALEALPHA;\n    const scale = backend_util.SELU_SCALE;\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 0) {\n        resultValues[i] = scale * v;\n      } else {\n        resultValues[i] = scaleAlpha * (Math.exp(v) - 1);\n      }\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  clip<T extends Tensor>(x: T, min: number, max: number): T {\n    assertNotComplex(x, 'clip');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      resultValues[i] = v > max ? max : (v < min ? min : v);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  abs<T extends Tensor>(x: T): T {\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.abs(values[i]);\n    }\n\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  complexAbs<T extends Tensor>(x: T): T {\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < x.size; ++i) {\n      const real = values[i * 2];\n      const imag = values[i * 2 + 1];\n      resultValues[i] = Math.hypot(real, imag);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  int<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'int');\n\n    const resultValues = new Int32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = values[i];\n    }\n    return this.makeOutput(resultValues, x.shape, 'int32');\n  }\n\n  sigmoid<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sigmoid');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = 1 / (1 + Math.exp(-values[i]));\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  softplus<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'softplus');\n\n    // mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n    // epsilon is the difference between 1.0 and the next representable float.\n    // For a single precision 32 bit float this should be 2^-23, see:\n    // https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n    const epsilon = 1.1920928955078125e-7;\n    const threshold = Math.log(epsilon) + 2.0;\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < values.length; ++i) {\n      // Value above which exp(x) may overflow, but softplus(x) == x\n      // is within machine epsilon.\n      const tooLarge = values[i] > -threshold;\n\n      // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n      // is within machine epsilon.\n      const tooSmall = values[i] < threshold;\n\n      const expX = Math.exp(values[i]);\n      let result;\n\n      if (tooSmall) {\n        result = expX;\n      } else if (tooLarge) {\n        result = values[i];\n      } else {\n        result = Math.log(1.0 + expX);\n      }\n      resultValues[i] = result;\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  sin<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sin');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.sin(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  cos<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'cos');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.cos(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  tan<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'tan');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.tan(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  asin<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'asin');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.asin(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  acos<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'acos');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.acos(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  atan<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'atan');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.atan(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  atan2<T extends Tensor>(a: T, b: T): T {\n    assertNotComplex([a, b], 'atan2');\n\n    return this.broadcastedBinaryOp(\n               a, b, a.dtype, (aValue, bValue) => Math.atan2(aValue, bValue)) as\n        T;\n  }\n\n  sinh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sinh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.sinh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  cosh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'cosh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.cosh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  tanh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'tanh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = util.tanh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  asinh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'asinh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.asinh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  acosh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'acosh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.acosh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  atanh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'atanh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.atanh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  erf<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'erf');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    const p = backend_util.ERF_P;\n    const a1 = backend_util.ERF_A1;\n    const a2 = backend_util.ERF_A2;\n    const a3 = backend_util.ERF_A3;\n    const a4 = backend_util.ERF_A4;\n    const a5 = backend_util.ERF_A5;\n    for (let i = 0; i < values.length; ++i) {\n      const sign = Math.sign(values[i]);\n      const v = Math.abs(values[i]);\n      const t = 1.0 / (1.0 + p * v);\n      resultValues[i] = sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  step<T extends Tensor>(x: T, alpha = 0): T {\n    assertNotComplex(x, 'step');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      if (isNaN(value)) {\n        resultValues[i] = NaN;\n      } else {\n        resultValues[i] = value > 0 ? 1 : alpha;\n      }\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  fusedConv2d(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          backend_util.FusedConv2DConfig): Tensor4D {\n    let result = this.conv2d(input, filter, convInfo);\n\n    if (bias) {\n      result = this.add(result, bias) as Tensor4D;\n    }\n    if (activation) {\n      result =\n          mapActivation(this, result, activation, preluActivationWeights) as\n          Tensor4D;\n    }\n    return result;\n  }\n\n  conv2d(x: Tensor4D, filter: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    assertNotComplex([x, filter], 'conv2d');\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const y = tf.buffer(convInfo.outShape, x.dtype as 'float32');\n\n    const xBatchStride = x.strides[0];\n    const xRowStride = isChannelsLast ? x.strides[1] : x.strides[2];\n    const xColStride = isChannelsLast ? x.strides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : x.strides[1];\n    const yBatchStride = y.strides[0];\n    const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n    const yColStride = isChannelsLast ? y.strides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * xBatchStride;\n      const yOffset1 = b * yBatchStride;\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const yOffset2 = yOffset1 + yR * yRowStride;\n        const xRCorner = yR * convInfo.strideHeight - padTop;\n        for (let wR = 0; wR < filterHeight; wR++) {\n          const xR = xRCorner + wR * dilationHeight;\n          if (xR < 0 || xR >= convInfo.inHeight) {\n            continue;\n          }\n          const wOffset1 = wR * filter.strides[0];\n          const xOffset2 = xOffset1 + xR * xRowStride;\n          for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n            const yOffset3 = yOffset2 + yC * yColStride;\n            const xCCorner = yC * convInfo.strideWidth - padLeft;\n            for (let wC = 0; wC < filterWidth; wC++) {\n              const xC = xCCorner + wC * dilationWidth;\n              if (xC < 0 || xC >= convInfo.inWidth) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wC * filter.strides[1];\n              const xOffset3 = xOffset2 + xC * xColStride;\n              let wOffset3 = wOffset2;\n              for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                const xVal = xVals[xOffset3 + d1 * xChannelStride];\n                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                  yVals[yOffset3 + d2 * yChannelStride] +=\n                      xVal * wVals[wOffset3 + d2];\n                }\n                wOffset3 += convInfo.outChannels;\n              }\n            }\n          }\n        }\n      }\n    }\n    return y.toTensor() as Tensor4D;\n  }\n\n  conv3d(x: Tensor5D, filter: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padFront = convInfo.padInfo.front;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const y = tf.buffer<Rank.R5>(convInfo.outShape, x.dtype as 'float32');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * x.strides[0];\n      const yOffset1 = b * y.strides[0];\n      for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n        const yOffset2 = yOffset1 + yF * y.strides[1];\n        const xFCorner = yF * convInfo.strideDepth - padFront;\n        for (let wF = 0; wF < filterDepth; wF++) {\n          const xF = xFCorner + wF * dilationDepth;\n          if (xF < 0 || xF >= convInfo.inDepth) {\n            continue;\n          }\n          const wOffset1 = wF * filter.strides[0];\n          const xOffset2 = xOffset1 + xF * x.strides[1];\n\n          for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n            const yOffset3 = yOffset2 + yR * y.strides[2];\n            const xRCorner = yR * convInfo.strideHeight - padTop;\n            for (let wR = 0; wR < filterHeight; wR++) {\n              const xR = xRCorner + wR * dilationHeight;\n              if (xR < 0 || xR >= convInfo.inHeight) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wR * filter.strides[1];\n              const xOffset3 = xOffset2 + xR * x.strides[2];\n              for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n                const xCCorner = yC * convInfo.strideWidth - padLeft;\n                for (let wC = 0; wC < filterWidth; wC++) {\n                  const xC = xCCorner + wC * dilationWidth;\n                  if (xC < 0 || xC >= convInfo.inWidth) {\n                    continue;\n                  }\n                  const wOffset3 = wOffset2 + wC * filter.strides[2];\n                  const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                  let wOffset4 = wOffset3;\n                  for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                    const xVal = xVals[xOffset4 + d1];\n                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                      yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                    }\n                    wOffset4 += convInfo.outChannels;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return y.toTensor();\n  }\n\n  conv2dDerInput(\n      dy: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([dy, filter], 'conv2dDerInput');\n\n    const dx = tf.buffer<Rank.R4>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2] = filter.strides;\n    const {\n      batchSize,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inHeight,\n      inWidth,\n      outChannels,\n      outHeight,\n      outWidth,\n      strideHeight,\n      strideWidth,\n      dataFormat\n    } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const xBatchStride = dx.strides[0];\n    const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n    const xColStride = isChannelsLast ? dx.strides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n    const yBatchStride = dy.strides[0];\n    const yRowStride = isChannelsLast ? dy.strides[1] : dy.strides[2];\n    const yColStride = isChannelsLast ? dy.strides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : dy.strides[1];\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yR = xRMin; yR < yRMax; ++yR) {\n              const wR = yR * strideHeight - xRCorner;\n\n              for (let yC = xCMin; yC < yCMax; ++yC) {\n                const wC = yC * strideWidth - xCCorner;\n                const dyOffset =\n                    yBatchStride * b + yRowStride * yR + yColStride * yC;\n                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n                for (let d2 = 0; d2 < outChannels; ++d2) {\n                  const pixel = dyValues[dyOffset + yChannelStride * d2];\n                  const weight = fltValues[fltOffset + d2];\n                  dotProd += pixel * weight;\n                }\n              }\n            }\n            const dxOffset = xBatchStride * b + xRowStride * xR +\n                xColStride * xC + xChannelStride * d1;\n            dxValues[dxOffset] = dotProd;\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  conv3dDerInput(\n      dy: Tensor5D, filter: Tensor5D,\n      convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const dx = tf.buffer<Rank.R5>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2, fltS3] = filter.strides;\n    const {\n      batchSize,\n      filterDepth,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inDepth,\n      inHeight,\n      inWidth,\n      outChannels,\n      outDepth,\n      outHeight,\n      outWidth,\n      strideDepth,\n      strideHeight,\n      strideWidth\n    } = convInfo;\n    const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        // Frames of depth\n        for (let xF = 0; xF < inDepth; ++xF) {\n          const xFCorner = xF - frontPad;\n          const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n          const yFMax =\n              Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n          // Rows as per standard 2d matrix notation\n          for (let xR = 0; xR < inHeight; ++xR) {\n            const xRCorner = xR - topPad;\n            const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n            const yRMax =\n                Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n            // Columns as per standard 2d matrix notation\n            for (let xC = 0; xC < inWidth; ++xC) {\n              const xCCorner = xC - leftPad;\n              const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n              const yCMax =\n                  Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n              let dotProd = 0;\n              for (let yF = xFMin; yF < yFMax; ++yF) {\n                const wF = yF * strideDepth - xFCorner;\n\n                for (let yR = xRMin; yR < yRMax; ++yR) {\n                  const wR = yR * strideHeight - xRCorner;\n\n                  for (let yC = xCMin; yC < yCMax; ++yC) {\n                    const wC = yC * strideWidth - xCCorner;\n                    const dyOffset =\n                        dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                    const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                        fltS1 * (filterHeight - 1 - wR) +\n                        fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                    for (let d2 = 0; d2 < outChannels; ++d2) {\n                      const pixel = dyValues[dyOffset + d2];\n                      const weight = fltValues[fltOffset + d2];\n                      dotProd += pixel * weight;\n                    }\n                  }\n                }\n              }\n              dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                  dotProd;\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  conv2dDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    assertNotComplex([x, dy], 'conv2dDerFilter');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const dW = tf.buffer<Rank.R4>(convInfo.filterShape, 'float32');\n\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const xBuf = this.bufferSync(x);\n    const dyBuf = this.bufferSync(dy);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            // Need to convolve.\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              for (let yR = yRMin; yR < yRMax; ++yR) {\n                const xR = wR + yR * strideHeight - topPad;\n                for (let yC = yCMin; yC < yCMax; ++yC) {\n                  const xC = wC + yC * strideWidth - leftPad;\n                  if (isChannelsLast) {\n                    dotProd +=\n                        xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                  } else {\n                    dotProd +=\n                        xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);\n                  }\n                }\n              }\n            }\n            dW.set(dotProd, wR, wC, d1, d2);\n          }\n        }\n      }\n    }\n    return dW.toTensor();\n  }\n\n  conv3dDerFilter(x: Tensor5D, dy: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const dw = tf.buffer<Rank.R5>(convInfo.filterShape, 'float32');\n    const dwValues = dw.values;\n    const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const [xS0, xS1, xS2, xS3] = x.strides;\n\n    const frontPad = convInfo.padInfo.front;\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n\n    for (let wF = 0; wF < filterDepth; ++wF) {\n      const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n      const yFMax = Math.min(\n          convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n      const wOffset1 = wF * dwS0;\n\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n        const yRMax = Math.min(\n            convInfo.outHeight,\n            (convInfo.inHeight + topPad - wR) / strideHeight);\n        const wOffset2 = wR * dwS1 + wOffset1;\n\n        for (let wC = 0; wC < filterWidth; ++wC) {\n          const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n          const yCMax = Math.min(\n              convInfo.outWidth,\n              (convInfo.inWidth + leftPad - wC) / strideWidth);\n          const wOffset3 = wC * dwS2 + wOffset2;\n\n          for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n            const wOffset4 = d1 * dwS3 + wOffset3;\n\n            for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n              let dotProd = 0;\n              for (let b = 0; b < convInfo.batchSize; ++b) {\n                const xOffset1 = b * xS0;\n                const yOffset1 = b * dyS0;\n\n                for (let yF = yFMin; yF < yFMax; ++yF) {\n                  const xF = wF + yF * strideDepth - frontPad;\n                  const xOffset2 = xF * xS1 + xOffset1;\n                  const yOffset2 = yF * dyS1 + yOffset1;\n\n                  for (let yR = yRMin; yR < yRMax; ++yR) {\n                    const xR = wR + yR * strideHeight - topPad;\n                    const xOffset3 = xR * xS2 + xOffset2;\n                    const yOffset3 = yR * dyS2 + yOffset2;\n\n                    for (let yC = yCMin; yC < yCMax; ++yC) {\n                      const xC = wC + yC * strideWidth - leftPad;\n                      const xOffset4 = xC * xS3 + xOffset3;\n                      const yOffset4 = yC * dyS3 + yOffset3;\n\n                      dotProd +=\n                          xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                    }\n                  }\n                }\n              }\n              dwValues[wOffset4 + d2] = dotProd;\n            }\n          }\n        }\n      }\n    }\n    return dw.toTensor();\n  }\n\n  fusedDepthwiseConv2D(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          backend_util.FusedConv2DConfig): Tensor4D {\n    let result = this.depthwiseConv2D(input, filter, convInfo);\n\n    if (bias) {\n      result = this.add(result, bias) as Tensor4D;\n    }\n    if (activation) {\n      result =\n          mapActivation(this, result, activation, preluActivationWeights) as\n          Tensor4D;\n    }\n    return result;\n  }\n\n  depthwiseConv2D(\n      x: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([x, filter], 'depthwiseConv2D');\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n    const y = tf.buffer(convInfo.outShape, x.dtype as 'float32');\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * x.strides[0];\n      const yOffset1 = b * y.strides[0];\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const yOffset2 = yOffset1 + yR * y.strides[1];\n        const xRCorner = yR * convInfo.strideHeight - padLeft;\n        for (let wR = 0; wR < filterHeight; ++wR) {\n          const xR = xRCorner + wR * dilationHeight;\n          if (xR < 0 || xR >= convInfo.inHeight) {\n            continue;\n          }\n          const wOffset1 = wR * filter.strides[0];\n          const xOffset2 = xOffset1 + xR * x.strides[1];\n          for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n            const yOffset3 = yOffset2 + yC * y.strides[2];\n            const xCCorner = yC * convInfo.strideWidth - padTop;\n            for (let wC = 0; wC < filterWidth; ++wC) {\n              const xC = xCCorner + wC * dilationWidth;\n              if (xC < 0 || xC >= convInfo.inWidth) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wC * filter.strides[1];\n              const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n              let yOffset4 = yOffset3;\n              let wOffset3 = wOffset2;\n              for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                const xVal = xVals[xOffset3 + d1];\n                for (let q = 0; q < chMul; ++q) {\n                  yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n                }\n                yOffset4 += chMul;\n                wOffset3 += chMul;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return y.toTensor() as Tensor4D;\n  }\n\n  depthwiseConv2DDerInput(\n      dy: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([dy, filter], 'depthwiseConv2DDerInput');\n\n    const dx = tf.buffer<Rank.R4>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2] = dx.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2] = dy.strides;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2] = filter.strides;\n    const {\n      batchSize,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inHeight,\n      inWidth,\n      outChannels,\n      outHeight,\n      outWidth,\n      strideHeight,\n      strideWidth\n    } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    const chMul = outChannels / inChannels;\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yR = xRMin; yR < yRMax; ++yR) {\n              const wR = yR * strideHeight - xRCorner;\n\n              for (let yC = xCMin; yC < yCMax; ++yC) {\n                const wC = yC * strideWidth - xCCorner;\n                const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n                for (let dm = 0; dm < chMul; ++dm) {\n                  const d2 = d1 * chMul + dm;\n                  const pixel = dyValues[dyOffset + d2];\n                  const weight = fltValues[fltOffset + dm];\n                  dotProd += pixel * weight;\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  depthwiseConv2DDerFilter(\n      x: Tensor4D, dy: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([x, dy], 'depthwiseConv2DDerFilter');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dW = tf.buffer<Rank.R4>(convInfo.filterShape, 'float32');\n\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n\n    const xBuf = this.bufferSync(x);\n    const dyBuf = this.bufferSync(dy);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          const d1 = Math.trunc(d2 / chMul);\n          const dm = d2 % chMul;\n\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, dm);\n        }\n      }\n    }\n    return dW.toTensor();\n  }\n\n  tile<T extends Tensor>(x: T, reps: number[]): T {\n    assertNotComplex(x, 'tile');\n    return tile(this.bufferSync(x), reps) as T;\n  }\n\n  pad<T extends Tensor>(\n      x: T, paddings: Array<[number, number]>, constantValue: number): T {\n    assertNotComplex(x, 'pad');\n\n    const outShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    const start = paddings.map(p => p[0]);\n    const xBuffer = this.bufferSync(x);\n    const buffer = tf.buffer(outShape, x.dtype as 'float32');\n    if (constantValue !== 0) {\n      buffer.values.fill(constantValue);\n    }\n\n    for (let i = 0; i < x.size; i++) {\n      const coords = xBuffer.indexToLoc(i);\n      const outCoords = coords.map((c, i) => c + start[i]);\n      buffer.set(xBuffer.get(...coords), ...outCoords);\n    }\n    return buffer.toTensor() as T;\n  }\n\n  gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T {\n    assertNotComplex([x, indices], 'gather');\n\n    const newShape: number[] = x.shape.slice();\n    const indicesValues = this.readSync(indices.dataId) as TypedArray;\n    newShape[axis] = indicesValues.length;\n    const result = tf.buffer(newShape, x.dtype);\n    const xBuf = this.bufferSync(x);\n\n    for (let i = 0; i < result.size; ++i) {\n      const newLoc = result.indexToLoc(i);\n\n      const originalLoc: number[] = newLoc.slice();\n      originalLoc[axis] = indicesValues[newLoc[axis]];\n\n      const originalIndex = xBuf.locToIndex(originalLoc);\n      result.values[i] = xBuf.values[originalIndex];\n    }\n    return result.toTensor() as T;\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T {\n    assertNotComplex([x], 'batchToSpaceND');\n\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted =\n        backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted =\n        backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords =\n        backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize =\n        backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n    return tf.transpose(x.reshape(reshaped), permuted)\n               .reshape(reshapedPermuted)\n               .slice(sliceBeginCoords, sliceSize) as T;\n  }\n\n  spaceToBatchND<T extends Tensor>(\n      x: T, blockShape: number[], paddings: Array<[number, number]>): T {\n    assertNotComplex([x], 'spaceToBatchND');\n\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const completePaddings: Array<[number, number]> = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n      completePaddings.push([0, 0]);\n    }\n\n    const paddedX = x.pad(completePaddings);\n\n    const reshapedPaddedShape =\n        backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n    const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n        reshapedPaddedShape.length, blockShape.length, false);\n    const flattenShape = backend_util.getReshapedPermuted(\n        paddedX.shape, blockShape, prod, false);\n\n    return tf.transpose(\n                 paddedX.reshape(reshapedPaddedShape),\n                 permutedReshapedPaddedPermutation)\n               .reshape(flattenShape) as T;\n  }\n\n  maxPool(x: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex(x, 'maxPool');\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    return pool(xValues, x.shape, x.dtype, x.strides, convInfo, 'max')\n               .toTensor() as Tensor4D;\n  }\n\n  maxPoolBackprop(\n      dy: Tensor4D, x: Tensor4D, y: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([x, y], 'maxPoolBackprop');\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const maxPosBuf = buffer(\n        convInfo.outShape, x.dtype,\n        maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = tf.buffer<Rank.R4>(x.shape, 'float32');\n\n    const dyBuf = this.bufferSync(dy);\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      for (let d = 0; d < convInfo.inChannels; ++d) {\n        for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n          for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n            // Shader code begins.\n            const dyRCorner = dxR - padTop;\n            const dyCCorner = dxC - padLeft;\n            let dotProd = 0;\n            for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n              const dyR = (dyRCorner + wR) / strideHeight;\n              if (dyR < 0 || dyR >= convInfo.outHeight ||\n                  Math.floor(dyR) !== dyR) {\n                continue;\n              }\n              for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                const dyC = (dyCCorner + wC) / strideWidth;\n                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                    Math.floor(dyC) !== dyC) {\n                  continue;\n                }\n                const maxPos = effectiveFilterHeight * effectiveFilterWidth -\n                    1 - (maxPosBuf.get(b, dyR, dyC, d) as number);\n                const curPos = wR * effectiveFilterWidth + wC;\n\n                const mask = maxPos === curPos ? 1 : 0;\n                if (mask === 0) {\n                  continue;\n                }\n\n                const pixel = dyBuf.get(b, dyR, dyC, d);\n                dotProd += pixel * mask;\n              }\n            }\n            dx.set(dotProd, b, dxR, dxC, d);\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  avgPoolBackprop(dy: Tensor4D, x: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    assertNotComplex([dy, x], 'avgPoolBackprop');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = tf.buffer<Rank.R4>(x.shape, 'float32');\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    const dyBuf = this.bufferSync(dy);\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      for (let d = 0; d < convInfo.inChannels; ++d) {\n        for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n          for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n            // Shader code begins.\n            const dyRCorner = dxR - padTop;\n            const dyCCorner = dxC - padLeft;\n            let dotProd = 0;\n            for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n              const dyR = (dyRCorner + wR) / strideHeight;\n              if (dyR < 0 || dyR >= convInfo.outHeight ||\n                  Math.floor(dyR) !== dyR) {\n                continue;\n              }\n              for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                const dyC = (dyCCorner + wC) / strideWidth;\n                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                    Math.floor(dyC) !== dyC) {\n                  continue;\n                }\n\n                const pixel = dyBuf.get(b, dyR, dyC, d);\n                dotProd += pixel;\n              }\n            }\n            dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  private pool3d(\n      x: Tensor5D, convInfo: backend_util.Conv3DInfo,\n      poolType: 'max'|'avg'): Tensor5D {\n    assertNotComplex(x, 'pool3d');\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const initialValue =\n        (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                              Number.POSITIVE_INFINITY);\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const output = tf.buffer(convInfo.outShape, x.dtype);\n    const outputVals = output.values;\n\n    const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n        convInfo.outShape[3] * convInfo.outShape[4];\n    const outputDepthStrides =\n        convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n    const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n    const outputColStrides = convInfo.outShape[4];\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      const outputBatchOffset = batch * outputBatchStrides;\n      const inputBatchOffset = batch * x.strides[0];\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n          const xDepthCorner = yDepth * strideDepth - padFront;\n          let xDepthMin = xDepthCorner;\n          while (xDepthMin < 0) {\n            xDepthMin += dilationDepth;\n          }\n          const xDepthMax =\n              Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n          const outputDepthOffset =\n              outputBatchOffset + yDepth * outputDepthStrides;\n          for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n            const xRowCorner = yRow * strideHeight - padTop;\n            let xRowMin = xRowCorner;\n            while (xRowMin < 0) {\n              xRowMin += dilationHeight;\n            }\n            const xRowMax =\n                Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n            const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n            for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n              const xColCorner = yCol * strideWidth - padLeft;\n              let xColMin = xColCorner;\n              while (xColMin < 0) {\n                xColMin += dilationWidth;\n              }\n              const xColMax =\n                  Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n              // Shader code begins\n              const outputColOffset = outputRowOffset + yCol * outputColStrides;\n              let minMaxValue = initialValue;\n              let avgValue = 0;\n              let count = 0;\n              for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                   xDepth += dilationDepth) {\n                const xDepthOffset = inputBatchOffset + xDepth * x.strides[1];\n                for (let xRow = xRowMin; xRow < xRowMax;\n                     xRow += dilationHeight) {\n                  const xRowOffset = xDepthOffset + xRow * x.strides[2];\n                  for (let xCol = xColMin; xCol < xColMax;\n                       xCol += dilationWidth) {\n                    const xColOffset = xRowOffset + xCol * x.strides[3];\n                    const pixel = xValues[xColOffset + channel];\n                    if ((poolType === 'max' && pixel > minMaxValue)) {\n                      minMaxValue = pixel;\n                    } else if (poolType === 'avg') {\n                      avgValue += pixel;\n                      count++;\n                    }\n                    if (isNaN(minMaxValue)) {\n                      break;\n                    }\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              const outputOffset = outputColOffset + channel;\n              outputVals[outputOffset] =\n                  poolType === 'avg' ? avgValue / count : minMaxValue;\n            }\n          }\n        }\n      }\n    }\n    return output.toTensor() as Tensor5D;\n  }\n\n  avgPool3d(x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex(x, 'avgPool3d');\n\n    return this.pool3d(x, convInfo, 'avg').toFloat();\n  }\n\n  avgPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex([dy, x], 'avgPool3dBackprop');\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = tf.buffer<Rank.R5>(x.shape, 'float32');\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    const dyBuf = this.bufferSync(dy);\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n          for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n            for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n              // Shader code begins.\n              const dyDepthCorner = dxDepth - padFront;\n              const dyRowCorner = dxRow - padTop;\n              const dyColCorner = dxCol - padLeft;\n              let dotProd = 0;\n              for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                   wDepth += dilationDepth) {\n                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                    Math.floor(dyDepth) !== dyDepth) {\n                  continue;\n                }\n                for (let wRow = 0; wRow < effectiveFilterHeight;\n                     wRow += dilationHeight) {\n                  const dyRow = (dyRowCorner + wRow) / strideHeight;\n                  if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                      Math.floor(dyRow) !== dyRow) {\n                    continue;\n                  }\n                  for (let wCol = 0; wCol < effectiveFilterWidth;\n                       wCol += dilationWidth) {\n                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                        Math.floor(dyCol) !== dyCol) {\n                      continue;\n                    }\n\n                    const pixel =\n                        dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    dotProd += pixel;\n                  }\n                }\n              }\n              dx.set(\n                  dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol,\n                  channel);\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  maxPool3d(x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex(x, 'maxPool3d');\n\n    return this.pool3d(x, convInfo, 'max').toFloat();\n  }\n\n  private maxPool3dPositions(x: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const maxPositions = tf.buffer(convInfo.outShape, 'int32');\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const xBuf = this.bufferSync(x);\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n          const xDepthCorner = yDepth * strideDepth - padFront;\n          let xDepthMin = xDepthCorner;\n          while (xDepthMin < 0) {\n            xDepthMin += dilationDepth;\n          }\n          const xDepthMax =\n              Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n          for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n            const xRowCorner = yRow * strideHeight - padTop;\n            let xRowMin = xRowCorner;\n            while (xRowMin < 0) {\n              xRowMin += dilationHeight;\n            }\n            const xRowMax =\n                Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n            for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n              const xColCorner = yCol * strideWidth - padLeft;\n              let xColMin = xColCorner;\n              while (xColMin < 0) {\n                xColMin += dilationWidth;\n              }\n              const xColMax =\n                  Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n              // Shader code begins\n              let maxValue = Number.NEGATIVE_INFINITY;\n              let maxPosition = -1;\n\n              for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                   xDepth += dilationDepth) {\n                const wDepth = xDepth - xDepthCorner;\n                for (let xRow = xRowMin; xRow < xRowMax;\n                     xRow += dilationHeight) {\n                  const wRow = xRow - xRowCorner;\n                  for (let xCol = xColMin; xCol < xColMax;\n                       xCol += dilationWidth) {\n                    const wCol = xCol - xColCorner;\n                    const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                    if (pixel >= maxValue) {\n                      maxValue = pixel;\n                      maxPosition = wDepth * effectiveFilterHeight *\n                              effectiveFilterWidth +\n                          wRow * effectiveFilterHeight + wCol;\n                    }\n                  }\n                }\n              }\n\n              maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n            }\n          }\n        }\n      }\n    }\n    return maxPositions.toTensor() as Tensor5D;\n  }\n\n  maxPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, y: Tensor5D,\n      convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex([x, y], 'maxPool3dBackprop');\n\n    const maxPositions = this.maxPool3dPositions(x, convInfo);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = tf.buffer<Rank.R5>(x.shape, 'float32');\n\n    const maxPosBuf = this.bufferSync(maxPositions);\n    const dyBuf = this.bufferSync(dy);\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n          for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n            for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n              // Shader code begins\n              const dyDepthCorner = dxDepth - padFront;\n              const dyRowCorner = dxRow - padTop;\n              const dyColCorner = dxCol - padLeft;\n              let dotProd = 0;\n              for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                   wDepth += dilationDepth) {\n                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                    Math.floor(dyDepth) !== dyDepth) {\n                  continue;\n                }\n                for (let wRow = 0; wRow < effectiveFilterHeight;\n                     wRow += dilationHeight) {\n                  const dyRow = (dyRowCorner + wRow) / strideHeight;\n                  if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                      Math.floor(dyRow) !== dyRow) {\n                    continue;\n                  }\n                  for (let wCol = 0; wCol < effectiveFilterWidth;\n                       wCol += dilationWidth) {\n                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                        Math.floor(dyCol) !== dyCol) {\n                      continue;\n                    }\n\n                    const maxPos = effectiveFilterDepth *\n                            effectiveFilterHeight * effectiveFilterWidth -\n                        1 -\n                        maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    const curPos =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterWidth + wCol;\n\n                    const mask = maxPos === curPos ? 1 : 0;\n                    if (mask === 0) {\n                      continue;\n                    }\n\n                    const pixel =\n                        dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    dotProd += pixel * mask;\n                  }\n                }\n              }\n              dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  cast<T extends Tensor>(x: T, dtype: DataType): T {\n    return backend_util.castTensor(x, dtype, this);\n  }\n\n  reshape<R extends Rank>(x: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    return backend_util.reshapeTensor(x, shape);\n  }\n\n  avgPool(x: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex(x, 'avgPool');\n    assertNotComplex(x, 'maxPool');\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    return pool(xValues, x.shape, x.dtype, x.strides, convInfo, 'avg')\n               .toTensor()\n               .toFloat() as Tensor4D;\n  }\n\n  resizeBilinear(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    assertNotComplex(x, 'resizeBilinear');\n\n    const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const result = new Float32Array(\n        util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n    const effectiveInputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n    let outputIdx = 0;\n    const effectiveRowSizeRatio =\n        effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio =\n        effectiveInputSize[1] / effectiveOutputSize[1];\n    for (let b = 0; b < batch; b++) {\n      for (let r = 0; r < newHeight; r++) {\n        const sourceFracRow = effectiveRowSizeRatio * r;\n        const sourceRowFloor = Math.floor(sourceFracRow);\n        const rowFrac = sourceFracRow - sourceRowFloor;\n        const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n        const topRowOffset = b * x.strides[0] + sourceRowFloor * x.strides[1];\n        const botRowOffset = b * x.strides[0] + sourceRowCeil * x.strides[1];\n        for (let c = 0; c < newWidth; c++) {\n          const sourceFracCol = effectiveColSizeRatio * c;\n          const sourceColFloor = Math.floor(sourceFracCol);\n          const colFrac = sourceFracCol - sourceColFloor;\n          const sourceColCeil =\n              Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n          const topLeftOffest = topRowOffset + sourceColFloor * x.strides[2];\n          const botLeftOffset = botRowOffset + sourceColFloor * x.strides[2];\n          const topRightOffset = topRowOffset + sourceColCeil * x.strides[2];\n          const botRightOffest = botRowOffset + sourceColCeil * x.strides[2];\n          for (let d = 0; d < numChannels; d++) {\n            // Begin shader.\n\n            // Compute the fractional index of the source.\n            const topLeft = xValues[topLeftOffest + d];\n            const bottomLeft = xValues[botLeftOffset + d];\n            const topRight = xValues[topRightOffset + d];\n            const bottomRight = xValues[botRightOffest + d];\n\n            const top = topLeft + (topRight - topLeft) * colFrac;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n            const newValue = top + (bottom - top) * rowFrac;\n\n            result[outputIdx++] = newValue;\n          }\n        }\n      }\n    }\n    return tf.tensor(result, [batch, newHeight, newWidth, numChannels]);\n  }\n\n  resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    assertNotComplex([dy, x], 'resizeBilinearBackprop');\n\n    const [batch, xHeight, xWidth, depth] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass and add the\n    // corresponding coefficient from dy to the gradient (with some\n    // interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    let offset = 0;\n    for (let b = 0; b < batch; b++) {\n      const bOffset = b * x.strides[0];\n      for (let r = 0; r < yHeight; r++) {\n        const dxR = r * heightScale;\n        const topDxRIndex = Math.floor(dxR);\n        const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n        const topDxROffset = bOffset + topDxRIndex * x.strides[1];\n        const bottomDxROffset = bOffset + bottomDxRIndex * x.strides[1];\n\n        const dxRLerp = dxR - topDxRIndex;\n        const inverseDxRLerp = 1.0 - dxRLerp;\n        for (let c = 0; c < yWidth; c++) {\n          const dxC = c * widthScale;\n          const leftDxCIndex = Math.floor(dxC);\n          const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n          const dxCLerp = dxC - leftDxCIndex;\n          const inverseDxCLerp = 1.0 - dxCLerp;\n\n          const topLeftRCOffset = topDxROffset + leftDxCIndex * x.strides[2];\n          const topRightRCOffset = topDxROffset + rightDxCIndex * x.strides[2];\n          const bottomLeftRCOffset =\n              bottomDxROffset + leftDxCIndex * x.strides[2];\n          const bottomRightRCOffset =\n              bottomDxROffset + rightDxCIndex * x.strides[2];\n\n          const inverseDxRLerpTimesInverseDxCLerp =\n              inverseDxRLerp * inverseDxCLerp;\n          const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n          const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n          const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n          for (let d = 0; d < depth; d++) {\n            const dyVal = dyValues[offset++];\n            output[topLeftRCOffset + d] +=\n                dyVal * inverseDxRLerpTimesInverseDxCLerp;\n            output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n            output[bottomLeftRCOffset + d] +=\n                dyVal * dxRLerpTimesInverseDxCLerp;\n            output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n          }\n        }\n      }\n    }\n    return tf.tensor4d(output, [batch, xWidth, xHeight, depth], x.dtype);\n  }\n\n  resizeNearestNeighbor(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    assertNotComplex(x, 'resizeNearestNeighbor');\n\n    const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n    const effectiveInputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    const effectiveRowSizeRatio =\n        effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio =\n        effectiveInputSize[1] / effectiveOutputSize[1];\n\n    let outputOffset = 0;\n    for (let b = 0; b < batch; b++) {\n      const batchOffset = b * x.strides[0];\n      for (let r = 0; r < newHeight; r++) {\n        const sourceFracRow = effectiveRowSizeRatio * r;\n        const sourceNearestRow = Math.min(\n            oldHeight - 1,\n            alignCorners ? Math.round(sourceFracRow) :\n                           Math.floor(sourceFracRow));\n        const rowOffset = batchOffset + sourceNearestRow * x.strides[1];\n        for (let c = 0; c < newWidth; c++) {\n          const sourceFracCol = effectiveColSizeRatio * c;\n          const sourceNearestCol = Math.min(\n              oldWidth - 1,\n              alignCorners ? Math.round(sourceFracCol) :\n                             Math.floor(sourceFracCol));\n          const colOffset = rowOffset + sourceNearestCol * x.strides[2];\n          for (let d = 0; d < numChannels; d++) {\n            // Begin shader.\n            // Compute the fractional index of the source.\n            const newVal = xValues[colOffset + d];\n            output[outputOffset++] = newVal;\n          }\n        }\n      }\n    }\n    return tf.tensor(\n        output, [batch, newHeight, newWidth, numChannels], x.dtype);\n  }\n\n  resizeNearestNeighborBackprop(\n      dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    assertNotComplex([dy, x], 'resizeNearestNeighborBackprop');\n\n    const [batch, xHeight, xWidth, depth] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    // Loop over the output space.\n    for (let b = 0; b < batch; b++) {\n      const batchOffset = b * x.strides[0];\n      for (let r = 0; r < xHeight; r++) {\n        const rowOffset = batchOffset + r * x.strides[1];\n\n        // Compute bounds for where in dy we will look\n        const startRLerp = Math.floor(r * invHeightScale);\n        const startDyR = Math.floor(startRLerp - (winHeight / 2));\n        for (let c = 0; c < xWidth; c++) {\n          const colOffset = rowOffset + c * x.strides[2];\n\n          // Compute bounds for where in dy we will look\n          const startCLerp = Math.floor(c * invWidthScale);\n          const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n          for (let d = 0; d < depth; d++) {\n            let accum = 0;\n            // loop over dy\n\n            for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n              const dyR = dyRIndex + startDyR;\n              // Guard against the window exceeding the bounds of dy\n              if (dyR < 0 || dyR >= yHeight) {\n                continue;\n              }\n\n              const dyROffset = batchOffset + dyR * dy.strides[1];\n              const sourceFracRow = dyR * heightScale;\n              const sourceNearestRow = Math.min(\n                  xHeight - 1,\n                  alignCorners ? Math.round(sourceFracRow) :\n                                 Math.floor(sourceFracRow));\n              if (r !== sourceNearestRow) {\n                continue;\n              }\n              for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n                const dyC = dyCIndex + startDyC;\n                // Guard against the window exceeding the bounds of dy\n                if (dyC < 0 || dyC >= yWidth) {\n                  continue;\n                }\n\n                const dyCOffset = dyROffset + dyC * dy.strides[2];\n                const sourceFracCol = dyC * widthScale;\n                const sourceNearestCol = Math.min(\n                    xWidth - 1,\n                    alignCorners ? Math.round(sourceFracCol) :\n                                   Math.floor(sourceFracCol));\n\n                if (c === sourceNearestCol) {\n                  accum += dyValues[dyCOffset + d];\n                }\n              }\n            }\n            output[colOffset + d] = accum;\n          }\n        }\n      }\n    }\n    return tf.tensor4d(output, x.shape, x.dtype);\n  }\n\n  batchNorm(\n      x: Tensor4D, mean: Tensor4D|Tensor1D, variance: Tensor4D|Tensor1D,\n      offset?: Tensor4D|Tensor1D, scale?: Tensor4D|Tensor1D,\n      varianceEpsilon?: number): Tensor4D {\n    assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const mVals = this.readSync(mean.dataId) as TypedArray;\n    const varVals = this.readSync(variance.dataId) as TypedArray;\n    const sVals = scale ? this.readSync(scale.dataId) as TypedArray :\n                          new Float32Array([1]);\n    const offVals = offset ? this.readSync(offset.dataId) as TypedArray :\n                             new Float32Array([0]);\n    const outVals = new Float32Array(xVals.length);\n\n    const offValsLength = offVals.length;\n    const sValsLength = sVals.length;\n    const varValsLength = varVals.length;\n    const mValsLength = mVals.length;\n\n    let offi = 0;\n    let mi = 0;\n    let si = 0;\n    let vi = 0;\n    for (let i = 0; i < xVals.length; ++i) {\n      outVals[i] = offVals[offi++] +\n          (xVals[i] - mVals[mi++]) * sVals[si++] /\n              Math.sqrt(varVals[vi++] + varianceEpsilon);\n      if (offi >= offValsLength) {\n        offi = 0;\n      }\n      if (mi >= mValsLength) {\n        mi = 0;\n      }\n      if (si >= sValsLength) {\n        si = 0;\n      }\n      if (vi >= varValsLength) {\n        vi = 0;\n      }\n    }\n    return tf.tensor4d(outVals, x.shape);\n  }\n\n  localResponseNormalization4D(\n      x: Tensor4D, depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    assertNotComplex(x, 'localResponseNormalization4D');\n\n    const channels = x.shape[3];\n    const maxD = channels - 1;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const size = x.size;\n    const result = new Float32Array(size);\n\n    function sumAcrossChannels(offset: number) {\n      const currentChannel = offset % channels;\n      let beginSumOffset =\n          offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n      const endSumOffset = offset - currentChannel +\n          Math.min(currentChannel + depthRadius, maxD);\n\n      let sum = 0.0;\n      for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n        const z = xValues[beginSumOffset];\n        sum += z * z;\n      }\n      return sum;\n    }\n\n    for (let offset = 0; offset < size; offset++) {\n      const sum = sumAcrossChannels(offset);\n      const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n      result[offset] = val;\n    }\n\n    return tf.tensor4d(result, x.shape);\n  }\n\n  LRNGrad(\n      dy: Tensor4D, inputImage: Tensor4D, outputImage: Tensor4D,\n      depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    assertNotComplex(dy, 'LRNGrad');\n    const channels = dy.shape[3];\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const inputImageValues = this.readSync(inputImage.dataId) as TypedArray;\n    const outputImageValues = this.readSync(outputImage.dataId) as TypedArray;\n    const result = new Float32Array(dy.size);\n    const size = dy.size;\n\n    for (let offset = 0; offset < size; offset++) {\n      const currentChannel = offset % channels;\n      const depthBegin =\n          (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n      const depthEnd = (offset - currentChannel) +\n          Math.min(channels, currentChannel + depthRadius + 1);\n\n      let norm = 0;\n      for (let k = depthBegin; k < depthEnd; k++) {\n        norm += Math.pow(inputImageValues[k], 2);\n      }\n      norm = alpha * norm + bias;\n\n      for (let k = depthBegin; k < depthEnd; k++) {\n        let dyi = -2 * alpha * beta * inputImageValues[k] *\n            outputImageValues[offset] / norm;\n        if (offset === k) {\n          dyi += Math.pow(norm, -beta);\n        }\n        dyi *= dyValues[offset];\n        result[k] += dyi;\n      }\n    }\n    return tf.tensor4d(result, dy.shape);\n  }\n\n  multinomial(\n      logits: Tensor2D, normalized: boolean, numSamples: number,\n      seed: number): Tensor2D {\n    assertNotComplex(logits, 'multinomial');\n\n    const probabilities = normalized ? logits : tf.softmax(logits);\n    const batchSize = probabilities.shape[0];\n    const numEvents = probabilities.shape[1];\n    const res = tf.zeros<Rank.R2>([batchSize, numSamples], 'int32');\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const probVals = this.readSync(probabilities.dataId) as TypedArray;\n\n    for (let b = 0; b < batchSize; ++b) {\n      const offset = b * numEvents;\n      // The cdf won't include the last event. It will be implicit if no other\n      // event happened.\n      const cdf = new Float32Array(numEvents - 1);\n      cdf[0] = probVals[offset];\n      for (let event = 1; event < cdf.length; ++event) {\n        cdf[event] = cdf[event - 1] + probVals[offset + event];\n      }\n\n      const random = seedrandom.alea(seed.toString());\n      const outOffset = b * numSamples;\n      for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n        const r = random();\n\n        // Assume last event happened by default.\n        resVals[outOffset + sampleId] = cdf.length;\n\n        for (let event = 0; event < cdf.length; event++) {\n          if (r < cdf[event]) {\n            resVals[outOffset + sampleId] = event;\n            break;\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number):\n      Tensor2D {\n    assertNotComplex(indices, 'oneHot');\n\n    const res = new Float32Array(indices.size * depth);\n    res.fill(offValue);\n    const indicesVal = this.readSync(indices.dataId) as TypedArray;\n\n    for (let event = 0; event < indices.size; ++event) {\n      if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n        res[event * depth + indicesVal[event]] = onValue;\n      }\n    }\n    return tf.tensor2d(res, [indices.size, depth], 'int32');\n  }\n\n  nonMaxSuppression(\n      boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n      iouThreshold: number, scoreThreshold: number): Tensor1D {\n    assertNotComplex(boxes, 'nonMaxSuppression');\n\n    const boxesVals = this.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = this.readSync(scores.dataId) as TypedArray;\n    return nonMaxSuppressionV3(\n        boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  }\n\n  fft(x: Tensor2D): Tensor2D {\n    return this.fftBatch(x, false);\n  }\n\n  ifft(x: Tensor2D): Tensor2D {\n    return this.fftBatch(x, true);\n  }\n\n  /**\n   * Calculate FFT of inner most elements of batch tensor.\n   */\n  private fftBatch(x: Tensor2D, inverse: boolean): Tensor2D {\n    const batch = x.shape[0];\n    const innerDim = x.shape[1];\n    // Collects real and imaginary values separately.\n    const realResult = tf.buffer(x.shape, 'float32');\n    const imagResult = tf.buffer(x.shape, 'float32');\n\n    const real = tf.real(x).as2D(batch, innerDim);\n    const imag = tf.imag(x).as2D(batch, innerDim);\n\n    for (let b = 0; b < batch; b++) {\n      // TODO: Support slice ops for complex type.\n      const r = real.slice([b, 0], [1, innerDim]);\n      const i = imag.slice([b, 0], [1, innerDim]);\n      const input = tf.complex(r, i);\n      // Run FFT by batch element.\n      const res =\n          this.readSync(this.fftImpl(input, inverse).dataId) as Float32Array;\n      for (let d = 0; d < innerDim; d++) {\n        const c = backend_util.getComplexWithIndex(res, d);\n        realResult.values[b * innerDim + d] = c.real;\n        imagResult.values[b * innerDim + d] = c.imag;\n      }\n    }\n\n    const t = tf.complex(realResult.toTensor(), imagResult.toTensor());\n    return t.as2D(batch, innerDim);\n  }\n\n  private fftImpl(x: Tensor2D, inverse: boolean): Tensor2D {\n    const x1D = x.as1D();\n\n    const n = x1D.size;\n\n    if (this.isExponentOf2(n)) {\n      let result = this.fftRadix2(x1D, n, inverse).as2D(x.shape[0], x.shape[1]);\n      if (inverse) {\n        result = tf.complex(\n                     tf.real(result).div(tf.scalar(n)),\n                     tf.imag(result).div(tf.scalar(n))) as Tensor2D;\n      }\n      return result;\n    } else {\n      const data = this.readSync(x.dataId) as TypedArray;\n      const rawOutput =\n          this.fourierTransformByMatmul(data, n, inverse) as Float32Array;\n      const output = backend_util.splitRealAndImagArrays(rawOutput);\n      return tf.complex(output.real, output.imag).as2D(x.shape[0], x.shape[1]);\n    }\n  }\n\n  private isExponentOf2(size: number): boolean {\n    return (size & size - 1) === 0;\n  }\n\n  // FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\n  private fftRadix2(input: Tensor1D, size: number, inverse: boolean): Tensor1D {\n    if (size === 1) {\n      return input;\n    }\n    const data = this.readSync(input.dataId) as TypedArray as Float32Array;\n    const half = size / 2;\n    const evenComplex = backend_util.complexWithEvenIndex(data);\n    let evenTensor = tf.complex(evenComplex.real, evenComplex.imag).as1D();\n    const oddComplex = backend_util.complexWithOddIndex(data);\n    let oddTensor = tf.complex(oddComplex.real, oddComplex.imag).as1D();\n\n    // Recursive call for half part of original input.\n    evenTensor = this.fftRadix2(evenTensor, half, inverse);\n    oddTensor = this.fftRadix2(oddTensor, half, inverse);\n\n    const e = backend_util.exponents(size, inverse);\n    const exponent = tf.complex(e.real, e.imag).mul(oddTensor);\n\n    const addPart = evenTensor.add(exponent);\n    const subPart = evenTensor.sub(exponent);\n\n    const realTensor = tf.real(addPart).concat(tf.real(subPart));\n    const imagTensor = tf.imag(addPart).concat(tf.imag(subPart));\n\n    return tf.complex(realTensor, imagTensor).as1D();\n  }\n\n  // Calculate fourier transform by multplying sinusoid matrix.\n  private fourierTransformByMatmul(\n      data: TypedArray, size: number, inverse: boolean): TypedArray {\n    const ret = new Float32Array(size * 2);\n    // TODO: Use matmul instead once it supports complex64 type.\n    for (let r = 0; r < size; r++) {\n      let real = 0.0;\n      let imag = 0.0;\n      for (let c = 0; c < size; c++) {\n        const e = backend_util.exponent(r * c, size, inverse);\n        const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n        real += term.real * e.real - term.imag * e.imag;\n        imag += term.real * e.imag + term.imag * e.real;\n      }\n      if (inverse) {\n        real /= size;\n        imag /= size;\n      }\n      backend_util.assignToTypedArray(ret, real, imag, r);\n    }\n    return ret;\n  }\n\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: 'NHWC'|'NCHW'):\n      Tensor4D {\n    util.assert(\n        dataFormat === 'NHWC',\n        () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n            dataFormat}`);\n    util.assert(\n        blockSize > 1,\n        () =>\n            `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n    const batchSize = x.shape[0];\n    const inputHeight = x.shape[1];\n    const inputWidth = x.shape[2];\n    const inputDepth = x.shape[3];\n\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const result =\n        new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n    let outputIdx = 0;\n    for (let b = 0; b < batchSize; ++b) {\n      for (let h = 0; h < outputHeight; ++h) {\n        const inH = Math.floor(h / blockSize);\n        const offsetH = (h % blockSize);\n        for (let w = 0; w < outputWidth; ++w) {\n          const inW = Math.floor(w / blockSize);\n          const offsetW = (w % blockSize);\n          const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n          for (let d = 0; d < outputDepth; ++d) {\n            const inD = d + offsetD;\n            const inputIdx =\n                inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n            result[outputIdx++] = xValues[inputIdx];\n          }\n        }\n      }\n    }\n    return tf.tensor4d(\n        result, [batchSize, outputHeight, outputWidth, outputDepth]);\n  }\n\n  private broadcastedBinaryOp(\n      a: Tensor, b: Tensor, dtype: DataType,\n      op: (a: number, b: number) => number): Tensor {\n    const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const result = tf.buffer(newShape, dtype);\n    const aVals = this.readSync(a.dataId) as TypedArray;\n    const bVals = this.readSync(b.dataId) as TypedArray;\n    const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n\n    const resVals = result.values;\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resVals.length; ++i) {\n        resVals[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      const aBuf = this.bufferSync(a);\n      const bBuf = this.bufferSync(b);\n      for (let i = 0; i < resVals.length; ++i) {\n        const loc = result.indexToLoc(i);\n\n        const aLoc = loc.slice(-a.rank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = aBuf.locToIndex(aLoc);\n\n        const bLoc = loc.slice(-b.rank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = bBuf.locToIndex(bLoc);\n\n        resVals[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n    return result.toTensor();\n  }\n\n  private broadcastedBinaryComplexOp(\n      a: Tensor, b: Tensor,\n      op:\n          (aReal: number, aImag: number, bReal: number,\n           bImag: number) => {real: number, imag: number}): Tensor {\n    const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const realResult = tf.buffer(newShape, 'float32');\n    const imagResult = tf.buffer(newShape, 'float32');\n\n    const aVals = this.readSync(a.dataId) as TypedArray;\n    const bVals = this.readSync(b.dataId) as TypedArray;\n    const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n\n    const realVals = realResult.values;\n    const imagVals = imagResult.values;\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < realVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        realVals[i] = result.real;\n        imagVals[i] = result.imag;\n      }\n    } else {\n      const aRealBuf =\n          this.bufferSync(this.data.get(a.dataId).complexTensors.real);\n      const bRealBuf =\n          this.bufferSync(this.data.get(b.dataId).complexTensors.real);\n      for (let i = 0; i < realVals.length; i++) {\n        const loc = realResult.indexToLoc(i);\n\n        const aLoc = loc.slice(-a.rank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = aRealBuf.locToIndex(aLoc);\n\n        const bLoc = loc.slice(-b.rank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = bRealBuf.locToIndex(bLoc);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        realVals[i] = opResult.real;\n        imagVals[i] = opResult.imag;\n      }\n    }\n    return this.complex(realResult.toTensor(), imagResult.toTensor());\n  }\n\n  split<T extends Tensor>(x: T, sizeSplits: number[], axis: number): T[] {\n    return split(x, sizeSplits, axis);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n\n  cropAndResize(\n      images: Tensor4D,\n      boxes: Tensor2D,\n      boxIndex: Tensor1D,\n      cropSize: [number, number],\n      method: string,\n      extrapolationValue: number,\n  ) {\n    const [batch, imageHeight, imageWidth, numChannels] = images.shape;\n    const numBoxes = boxes.shape[0];\n\n    const [cropHeight, cropWidth] = cropSize;\n    const output =\n        tf.buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n    const boxVals = this.readSync(boxes.dataId) as TypedArray;\n    const boxIndVals = this.readSync(boxIndex.dataId) as TypedArray;\n    const imageVals = this.readSync(images.dataId) as TypedArray;\n\n    const inStride = images.strides;   // to calculate flat indexes into image\n    const outStride = output.strides;  // to calculate flat indexes into output\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n    for (let b = 0; b < numBoxes; b++) {\n      const startInd = b * 4;\n      const y1 = boxVals[startInd];\n      const x1 = boxVals[startInd + 1];\n      const y2 = boxVals[startInd + 2];\n      const x2 = boxVals[startInd + 3];\n\n      const bInd: number = boxIndVals[b];\n      if (bInd >= batch) {\n        continue;\n      }\n\n      const heightScale = (cropHeight > 1) ?\n          (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) :\n          0;\n      const widthScale =\n          (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n      for (let y = 0; y < cropHeight; y++) {\n        const yInd: number = (cropHeight > 1) ?\n            y1 * (imageHeight - 1) + y * (heightScale) :\n            0.5 * (y1 + y2) * (imageHeight - 1);\n\n        if (yInd < 0 || yInd > imageHeight - 1) {\n          for (let x = 0; x < cropWidth; x++) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n          }\n          continue;\n        }\n\n        if (method === 'bilinear') {\n          const topInd = Math.floor(yInd);\n          const bottomInd = Math.ceil(yInd);\n          const yLerp = yInd - topInd;\n\n          for (let x = 0; x < cropWidth; x++) {\n            const xInd = (cropWidth > 1) ?\n                x1 * (imageWidth - 1) + x * widthScale :\n                0.5 * (x1 + x2) * (imageWidth - 1);\n\n            if (xInd < 0 || xInd > imageWidth - 1) {\n              for (let c = 0; c < numChannels; c++) {\n                const ind =\n                    c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[ind] = extrapolationValue;\n              }\n              continue;\n            }\n\n            const leftInd = Math.floor(xInd);\n            const rightInd = Math.ceil(xInd);\n            const xLerp = xInd - leftInd;\n\n            for (let c = 0; c < numChannels; c++) {\n              let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                  bInd * inStride[0];\n              const topLeft = imageVals[ind];\n\n              ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                  bInd * inStride[0];\n              const topRight = imageVals[ind];\n\n              ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                  bInd * inStride[0];\n              const bottomLeft = imageVals[ind];\n\n              ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                  bInd * inStride[0];\n              const bottomRight = imageVals[ind];\n\n              const top = topLeft + (topRight - topLeft) * xLerp;\n              const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n              ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = top + ((bottom - top) * yLerp);\n            }\n          }\n        } else {  // method == \"nearest\"\n          for (let x = 0; x < cropWidth; ++x) {\n            const xInd = (cropWidth > 1) ?\n                x1 * (imageWidth - 1) + x * widthScale :\n                0.5 * (x1 + x2) * (imageWidth - 1);\n\n            if (xInd < 0 || xInd > imageWidth - 1) {\n              for (let c = 0; c < numChannels; c++) {\n                const ind =\n                    c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[ind] = extrapolationValue;\n              }\n              continue;\n            }\n\n            const closestX = Math.round(xInd);\n            const closestY = Math.round(yInd);\n            for (let c = 0; c < numChannels; c++) {\n              const inInd = c + closestX * inStride[2] +\n                  closestY * inStride[1] + bInd * inStride[0];\n              const outInd =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[outInd] = imageVals[inInd];\n            }\n          }\n        }\n      }\n    }\n    return output.toTensor() as Tensor4D;\n  }\n\n  sparseToDense<R extends Rank>(\n      sparseIndices: Tensor, sparseValues: Tensor, outputShape: ShapeMap[R],\n      defaultValue: Scalar): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    return this.scatter(\n        sparseIndices, sparseValues, outputShape, outputSize, sliceSize,\n        numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n  }\n\n  gatherND(x: Tensor, indices: Tensor): Tensor {\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n\n    const [resultShape, numSlices, sliceSize, strides] =\n        backend_util.prepareAndValidate(x, indices);\n    if (numSlices === 0) {\n      return tf.tensor([], resultShape, x.dtype);\n    }\n\n    const buffer = new TensorBuffer([numSlices, sliceSize], x.dtype);\n    const indicesData = this.readSync(indices.dataId) as TypedArray;\n    const xData = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < numSlices; i++) {\n      const index = [];\n      let flattenIndex = 0;\n      for (let j = 0; j < sliceRank; j++) {\n        const dim = indicesData[i * sliceRank + j];\n        flattenIndex += dim * strides[j];\n        index.push(dim);\n      }\n      if (flattenIndex < 0 || flattenIndex >= x.size / sliceSize) {\n        throw new Error(\n            `Invalid indices: ${index} does not index into ${x.shape}`);\n      }\n\n      for (let k = 0; k < sliceSize; k++) {\n        buffer.values[i * sliceSize + k] = xData[flattenIndex * sliceSize + k];\n      }\n    }\n    return buffer.toTensor().reshape(resultShape);\n  }\n\n  scatterND<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        backend_util.calculateShapes(updates, indices, shape);\n    const defaultValue = tf.scalar(0);\n    const sumDupeIndices = true;\n    return this.scatter(\n        indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank,\n        strides, defaultValue, sumDupeIndices);\n  }\n\n  fill<R extends Rank>(\n      shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n    dtype = dtype || util.inferDtype(value);\n    const values =\n        util.getArrayFromDType(dtype, util.sizeFromShape(shape)) as TypedArray;\n    values.fill(value as number);\n    return engine().makeTensor(values, shape, dtype, this) as Tensor<R>;\n  }\n\n  onesLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    if (x.dtype === 'string') {\n      throw new Error('onesLike is not supported for string tensors');\n    } else {\n      return this.fill(x.shape, 1, x.dtype);\n    }\n  }\n\n  zerosLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    const values = util.getArrayFromDType(\n                       x.dtype, util.sizeFromShape(x.shape)) as TypedArray;\n    return this.makeOutput(values, x.shape, x.dtype);\n  }\n\n  linspace(start: number, stop: number, num: number): Tensor1D {\n    return backend_util.linspaceImpl(start, stop, num);\n  }\n\n  private scatter<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R], outputSize: number,\n      sliceSize: number, numUpdates: number, sliceRank: number,\n      strides: number[], defaultValue: Scalar,\n      sumDupeIndices: boolean): Tensor<R> {\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n\n    const indicesData = this.readSync(indices.dataId) as TypedArray;\n    const updatesData = this.readSync(updates.dataId) as TypedArray;\n\n    if (outputSize === 0) {\n      return tf.tensor([], shape, updates.dtype);\n    }\n\n    const buffer = new TensorBuffer(flattenShape, updates.dtype as 'float32');\n    buffer.values.fill((this.readSync(defaultValue.dataId) as TypedArray)[0]);\n\n    for (let i = 0; i < numUpdates; i++) {\n      const index = [];\n      let flattenIndex = 0;\n      for (let j = 0; j < sliceRank; j++) {\n        const dim = indicesData[i * sliceRank + j];\n        index.push(dim);\n        flattenIndex += dim * strides[j];\n      }\n\n      if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n        throw new Error(\n            `Invalid indices: ${index} does not index into ${shape}`);\n      }\n\n      for (let k = 0; k < sliceSize; k++) {\n        if (sumDupeIndices) {\n          buffer.values[flattenIndex * sliceSize + k] +=\n              updatesData[i * sliceSize + k];\n        } else {\n          buffer.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n              updatesData[0] :\n              updatesData[i * sliceSize + k];\n        }\n      }\n    }\n    return buffer.toTensor().reshape(shape);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BinaryInputs, KernelConfig} from '@tensorflow/tfjs-core';\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function createBinaryKernelConfig(\n    name: string,\n    op: (\n        aShape: number[], bShape: number[], aVals: TypedArray,\n        bVals: TypedArray,\n        dtype: DataType) => [TypedArray, number[]]): KernelConfig {\n  return {\n    kernelName: name,\n    backendName: 'cpu',\n    kernelFunc: ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const [resultData, resultShape] =\n          op(a.shape, b.shape, aVals, bVals, a.dtype);\n\n      const dataId = cpuBackend.write(resultData, resultShape, a.dtype);\n      return {dataId, shape: resultShape, dtype: a.dtype};\n    }\n  };\n}\n\nexport function createBinaryKernelImpl(op: (a: number, b: number) => number) {\n  return (aShape: number[], bShape: number[], aVals: TypedArray,\n          bVals: TypedArray, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {createBinaryKernelImpl} from '../utils/kernel_utils';\n\nexport const divImpl = createBinaryKernelImpl((a: number, b: number) => a / b);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Div} from '@tensorflow/tfjs-core';\nimport {createBinaryKernelConfig} from '../utils/kernel_utils';\nimport {divImpl} from './Div_impl';\n\nexport const divConfig = createBinaryKernelConfig(Div, divImpl);\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Max, MaxAttrs, MaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxInputs;\n    const {reductionIndices} = attrs as {} as MaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    let xShape = x.shape;\n    const xRank = xShape.length;\n\n    const origAxes = util.parseAxisParam(reductionIndices, xShape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    if (permutedAxes != null) {\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = xShape[permutedAxes[i]];\n      }\n\n      xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n      xShape = newShape;\n    }\n\n    assertNotComplex(x, 'max');\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xShape, axes);\n\n    const reduceSize = util.sizeFromShape(reduceShape);\n\n    const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n    const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n    return {dataId, shape: maxOutShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {kernel_impls} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5 = kernel_impls.nonMaxSuppressionV5;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {boxes, scores} = inputs as NonMaxSuppressionV5Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} =\n        attrs as unknown as NonMaxSuppressionV5Attrs;\n\n    const cpuBackend = backend as MathBackendCPU;\n\n    assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n    const boxesVals = cpuBackend.data.get(boxes.dataId).values as TypedArray;\n    const scoresVals = cpuBackend.data.get(scores.dataId).values as TypedArray;\n\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n\n    const {selectedIndices, selectedScores} = nonMaxSuppressionV5(\n        boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n        scoreThresholdVal, softNmsSigmaVal);\n\n    return [selectedIndices, selectedScores];\n  }\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {SquaredDifference} from '@tensorflow/tfjs-core';\nimport {createBinaryKernelImpl} from '../utils/kernel_utils';\nimport {createBinaryKernelConfig} from '../utils/kernel_utils';\n\nconst squaredDifferenceImpl = createBinaryKernelImpl((aVal, bVal) => {\n  const diff = aVal - bVal;\n  return diff * diff;\n});\n\nexport const squaredDifferenceConfig =\n    createBinaryKernelConfig(SquaredDifference, squaredDifferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {divConfig} from './kernels/Div';\nimport {maxConfig} from './kernels/Max';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {transposeConfig} from './kernels/Transpose';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  nonMaxSuppressionV5Config, squareConfig, squaredDifferenceConfig, divConfig,\n  transposeConfig, maxPoolWithArgmaxConfig, maxConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {Transpose, TransposeAttrs, TransposeInputs} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as TransposeInputs;\n    const {perm} = attrs as {} as TransposeAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    assertNotComplex(x, 'transpose');\n\n    const xRank = x.shape.length;\n\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = x.shape[perm[i]];\n    }\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n    const dataId = cpuBackend.write(result, newShape, x.dtype);\n    return {dataId, shape: newShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './base';\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\nimport './register_all_kernels';\n\n// All exports from this package should be in base.\nexport * from './base';\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.0.1';\nexport {version};\n"],"names":["maxImpl","aVals","reduceSize","outShape","dtype","vals","util","getTypedArrayFromDType","sizeFromShape","i","length","offset","max","j","value","transposeImpl","xVals","xShape","perm","newShape","xRank","xSize","xStrides","computeStrides","newStrides","result","loc","indexToLoc","newLoc","Array","locToIndex","assertNotComplex","tensor","opName","isArray","forEach","t","assert","pool","xValues","strides","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","initialValue","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","output","buffer","outputVals","values","outputBatchStrides","outputRowStrides","outputColStrides","b","batchSize","outputBatchOffset","inputBatchOffset","d","inChannels","yR","outHeight","xRCorner","xRMin","Math","xRMax","min","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","isNaN","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","xBuf","maxValue","maxPosition","wR","wC","get","set","nonMaxSuppressionV3","kernel_impls","split","tile","topkImpl","whereImpl","mapActivation","backend","x","activation","preluActivationWeights","linear","relu","elu","relu6","prelu","Error","MathBackendCPU","KernelBackend","[object Object]","super","this","data","DataStorage","engine","shape","firstUse","env","backend_util","warn","dataId","numDataIds","readSync","complexTensors","realValues","real","imagValues","imag","mergeRealAndImagArrays","decodedData","map","decodeString","tf.buffer","write","makeTensorFromDataId","has","dispose","delete","f","start","now","kernelMs","unreliable","reasons","makeOutput","keep","clone","input","begin","size","slice_util","isSliceContinous","flatOffset","computeFlatOffset","tf.tensor","subarray","bufferSync","xLoc","idx","toTensor","end","computeOutShape","some","axis","num","rank","outIndex","fill","slice","res","reshape","outLoc","inLoc","ax","tensors","reals","tf.real","imags","tf.imag","tf.complex","concat","tensors2D","innerSize","as2D","colOffset","tVals","tIdx","row","resIdx","col","finalOutShape","multiply","tf.scalar","a","broadcastedBinaryComplexOp","cast","aReal","aImag","bReal","bImag","broadcastedBinaryOp","upcastType","aValue","bValue","resultVals","currVals","logits","dim","axes","parseAxisParam","maxLogit","expandedShape","expandShapeToKeepDim","subtract","exp","sumExp","sum","tf.div","pow","transposeA","transposeB","sharedDim","leftDim","rightDim","batchDim","aValues","bValues","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","blockSize","i0","j0","k0","iBlock","jBlock","kBlock","k","bias","batchMatMul","add","floor","assertAxesAreInnerMostDims","reduceShape","computeOutAndReduceShapes","resultDtype","tf.zeros","prod","segmentIds","numSegments","numIters","expandDims","segmentId","tf.equal","asType","mul","push","tf.stack","minIndex","maxIndex","exclusive","reverse","finalDim","indexAdjuster","prevIdx","aVal","bVal","newValues","Uint8Array","condition","index","condVals","sorted","rem","all","anyVal","diff","Float32Array","ceil","abs","Infinity","isFinite","base","expm1","log","log1p","sqrt","inVals","xValue","resultValues","v","dy","y","dyValues","scaleAlpha","SELU_SCALEALPHA","scale","SELU_SCALE","hypot","Int32Array","threshold","tooLarge","tooSmall","expX","sin","cos","tan","asin","acos","atan","atan2","sinh","cosh","tanh","asinh","acosh","atanh","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","sign","alpha","NaN","filter","conv2d","filterHeight","filterWidth","isChannelsLast","dataFormat","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","filterDepth","dilationDepth","padFront","front","yF","outDepth","xFCorner","strideDepth","wF","xF","inDepth","wOffset2","yOffset4","xOffset4","wOffset4","dx","inShape","dxValues","fltValues","fltS0","fltS1","fltS2","topPad","leftPad","yRMax","yCMax","dotProd","dyOffset","fltOffset","dxS0","dxS1","dxS2","dxS3","dyS0","dyS1","dyS2","dyS3","fltS3","frontPad","xFMin","yFMax","dW","filterShape","dyBuf","yRMin","yCMin","dw","dwValues","dwS0","dwS1","dwS2","dwS3","xS0","xS1","xS2","xS3","yFMin","depthwiseConv2D","chMul","q","dm","trunc","reps","paddings","constantValue","xBuffer","coords","outCoords","c","indices","indicesValues","originalLoc","originalIndex","blockShape","crops","reduce","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","tf.transpose","completePaddings","paddedX","pad","reshapedPaddedShape","permutedReshapedPaddedPermutation","flattenShape","maxPosBuf","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","mask","avgMultiplier","effectiveFilterDepth","outputDepthStrides","batch","channel","yDepth","xDepthCorner","xDepthMin","xDepthMax","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","pool3d","toFloat","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","maxPool3dPositions","castTensor","reshapeTensor","newHeight","newWidth","alignCorners","oldHeight","oldWidth","numChannels","effectiveInputSize","effectiveOutputSize","outputIdx","effectiveRowSizeRatio","effectiveColSizeRatio","r","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","topLeft","bottomLeft","newValue","xHeight","xWidth","depth","yHeight","yWidth","effectiveXSize","effectiveYSize","heightScale","widthScale","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","tf.tensor4d","outputOffset","batchOffset","rowOffset","round","newVal","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","outVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","z","val","inputImage","outputImage","inputImageValues","outputImageValues","depthBegin","depthEnd","norm","dyi","normalized","numSamples","seed","probabilities","tf.softmax","numEvents","probVals","cdf","event","random","seedrandom.alea","toString","outOffset","sampleId","onValue","offValue","indicesVal","tf.tensor2d","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","fftBatch","inverse","innerDim","realResult","imagResult","fftImpl","getComplexWithIndex","x1D","as1D","n","isExponentOf2","fftRadix2","div","rawOutput","fourierTransformByMatmul","splitRealAndImagArrays","half","evenComplex","complexWithEvenIndex","evenTensor","oddComplex","complexWithOddIndex","oddTensor","e","exponents","exponent","addPart","subPart","sub","realTensor","imagTensor","ret","term","assignToTypedArray","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","h","inH","offsetH","w","inW","offsetD","inputIdx","op","assertAndGetBroadcastShape","bVals","aBroadcastDims","getBroadcastDims","bBroadcastDims","aBuf","bBuf","aLoc","aIndex","bLoc","bIndex","realVals","imagVals","aIdx","bIdx","aRealBuf","bRealBuf","opResult","complex","sizeSplits","epsilon","images","boxIndex","cropSize","method","extrapolationValue","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topRight","bottom","closestX","closestY","inInd","outInd","sparseIndices","sparseValues","outputShape","defaultValue","sliceRank","numUpdates","outputSize","calculateShapes","scatter","indicesShape","resultShape","numSlices","prepareAndValidate","TensorBuffer","indicesData","xData","flattenIndex","updates","inferDtype","getArrayFromDType","makeTensor","stop","linspaceImpl","sumDupeIndices","updatesData","createBinaryKernelConfig","name","kernelName","backendName","kernelFunc","inputs","cpuBackend","resultData","createBinaryKernelImpl","aShape","bShape","resultRank","resultStrides","resultSize","aRank","bRank","aStrides","bStrides","divImpl","divConfig","Div","maxConfig","Max","attrs","reductionIndices","permutedAxes","getAxesPermutation","getInnerMostAxes","maxOutShape","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","filterSize","computePool2DInfo","pooled","indexes","maxPools","maxPoolWithArgmaxImpl","pooledDataId","indexesDataId","nonMaxSuppressionV5","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedIndices","selectedScores","squareConfig","Square","squaredDifferenceImpl","kernelConfigs","SquaredDifference","Transpose","kernelConfig","registerKernel"],"mappings":"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"}